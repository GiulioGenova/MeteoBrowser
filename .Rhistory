roxygen2::roxygenise(getwd())
devtools::install_github("GiulioGenova/MonalisR")
roxygen2::roxygenise(getwd())
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
remove.packages("MonalisR")
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
run_app()
run_app('MeteoBrowser',launchBrowser = F)
remove.packages(MeteoBrowser)
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
run_app('MeteoBrowser',launchBrowser = F)
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
run_app('MeteoBrowser',launchBrowser = F)
run_app('MeteoBrowser',launchBrowser = T)
remove.packages("leaflet")
remove.packages("leaflet.extras")
devtools::install_github('rstudio/leaflet')
devtools::install_github('bhaskarvk/leaflet.extras')
run_app('MeteoBrowser',launchBrowser = T)
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
roxygen2::roxygenise()
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
run_app('MeteoBrowser',launchBrowser = T)
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
library(MeteoBrowser)
?run_app
roxygen2::roxygenise()
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
?run_app
roxygen2::roxygenise()
remove.packages("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
?run_app
if (interactive()) {
ui <- fluidPage(
passwordInput("password", "Password:"),
actionButton("go", "Go"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({
req(input$go)
isolate(input$password)
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
# actionButton("show", "Login"),
verbatimTextOutput("dataInfo")
)
)
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
# modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
library(shiny)
library(shinydashboard)
i <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
# actionButton("show", "Login"),
verbatimTextOutput("dataInfo")
)
)
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
# modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
library(shiny)
library(shinydashboard)
Logged = FALSE
my_username <- "test"
my_password <- "test"
ui <- dashboardPage(skin='blue',
dashboardHeader( title = "Dashboard"),
dashboardSidebar(),
dashboardBody("Test",
# actionButton("show", "Login"),
verbatimTextOutput("dataInfo")
)
)
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
# modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
MeteoBrowser::run_app()
MeteoBrowser::run_app('MeteoBrowser')
MeteoBrowser::run_app("MeteoBrowser")
setwd("..")
setwd("..")
datasets::Nile
library(datasets)
#assuming that the population out of wich we take the sample is normally
#distributed
t.test(Nile,alternative = "two.sided",mu = 900,conf.level = 0.95)
# trying to understand if this list of values is compatible with
# a poluplation with a mena of 900
# p value is 0.25 so it is n
sd(Nile)
# two sided: see if the data is compatible with mean = something
# less: see if the data is compatible with mean <= something
# greater : see if the data is compatible with mean >= something
t.test(htemp,"greater",mu=49)
# two sided: see if the data is compatible with mean = something
# less: see if the data is compatible with mean <= something
# greater : see if the data is compatible with mean >= something
t.test(temp,"greater",mu=49)
library(datasets,help = T)
library(help = "datasets")
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = F)
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = F)
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = T)
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = F)
url <- "http://daten.buergernetz.bz.it/services/meteo/v1/sensors"
u <- GET(url) %>% content
library(httr)
u <- GET(url) %>% content
!is.null(u)
se<-bind_rows(u)
se <-se[!duplicated(se[ , 1:2 ]), ]
st<-getMeteoStat()
legend_tab<-full_join(st,se)%>%#dplyr::select(-NAME_L,-NAME_E,-DESC_L,-DATE,VALUE,-LAT,-LONG,-VALUE)%>%
mutate_if(is.character, funs(as.factor(.)))%>%
mutate(
id=row_number(),
DESC_E=as.factor(ifelse(DESC_D=="relative Luftfeuchte","Relative humidity",
ifelse(DESC_D=="Niederschlag","Precipitation",
ifelse(DESC_D=="Windgeschwindigkeit","Wind speed",
ifelse(DESC_D=="Windrichtung","Wind direction",
ifelse(DESC_D=="Windgeschwindigkeit Böe","Wind direction",
ifelse(DESC_D=="Luftdruck","Atmospheric pression",
ifelse(DESC_D=="Globalstrahlung","Solar Radiation",
ifelse(DESC_D=="Sonnenscheindauer","Sunshine hours",
ifelse(DESC_D=="Schneehöhe","Snow height",
ifelse(DESC_D=="Wassertemperatur","Water temperature",
ifelse(DESC_D=="Lufttemperatur","Air temperature",
ifelse(DESC_D=="Durchfluss","Water flow",
ifelse(DESC_D=="Wasserstand","Water level",
ifelse(DESC_D=="Grundwasserstand","Groundwater level","unknown"))))))))))))))))
tot_tab<<-legend_tab%>%select(-NAME_L,-DESC_L,-DATE,-LAT,-LONG,-VALUE) %>%
mutate(NAME = paste(NAME_D,NAME_I,sep=" / ")) %>%
mutate(DESC_D = paste(DESC_D,UNIT,sep=" - ")) %>%
mutate(DESC_I = paste(DESC_I,UNIT,sep=" - ")) %>%
unite(DESC_E,DESC_E,UNIT,sep=" - ")
legend_tab<<-legend_tab %>% select(-DATE,-VALUE)
se_spread <<- se  %>%
select(SCODE,TYPE,UNIT,VALUE,DATE) %>%
mutate(DATE=paste0("(",as_datetime(DATE),")"))%>%
unite(VALUE,VALUE,UNIT,sep=" ") %>%
mutate(VALUE=paste0("<b>",VALUE,"</b>"))%>%
unite(VALUE,VALUE,DATE,sep=" ") %>%
spread(TYPE,VALUE)
sspat<<-getMeteoStat(format = "spatial")
se_spread<<-left_join(sspat,se_spread)
tot_tab<- tot_tab_def
legend_tab<- legend_tab_def
se_spread <- se_spread_def
sspat<- sspat_def
se_spread<- se_spread_def
library(dplyr)
library(tidyr)
se<-bind_rows(u)
se <-se[!duplicated(se[ , 1:2 ]), ]
st<-getMeteoStat()
legend_tab<-full_join(st,se)%>%#dplyr::select(-NAME_L,-NAME_E,-DESC_L,-DATE,VALUE,-LAT,-LONG,-VALUE)%>%
mutate_if(is.character, funs(as.factor(.)))%>%
mutate(
id=row_number(),
DESC_E=as.factor(ifelse(DESC_D=="relative Luftfeuchte","Relative humidity",
ifelse(DESC_D=="Niederschlag","Precipitation",
ifelse(DESC_D=="Windgeschwindigkeit","Wind speed",
ifelse(DESC_D=="Windrichtung","Wind direction",
ifelse(DESC_D=="Windgeschwindigkeit Böe","Wind direction",
ifelse(DESC_D=="Luftdruck","Atmospheric pression",
ifelse(DESC_D=="Globalstrahlung","Solar Radiation",
ifelse(DESC_D=="Sonnenscheindauer","Sunshine hours",
ifelse(DESC_D=="Schneehöhe","Snow height",
ifelse(DESC_D=="Wassertemperatur","Water temperature",
ifelse(DESC_D=="Lufttemperatur","Air temperature",
ifelse(DESC_D=="Durchfluss","Water flow",
ifelse(DESC_D=="Wasserstand","Water level",
ifelse(DESC_D=="Grundwasserstand","Groundwater level","unknown"))))))))))))))))
tot_tab<<-legend_tab%>%select(-NAME_L,-DESC_L,-DATE,-LAT,-LONG,-VALUE) %>%
mutate(NAME = paste(NAME_D,NAME_I,sep=" / ")) %>%
mutate(DESC_D = paste(DESC_D,UNIT,sep=" - ")) %>%
mutate(DESC_I = paste(DESC_I,UNIT,sep=" - ")) %>%
unite(DESC_E,DESC_E,UNIT,sep=" - ")
legend_tab<<-legend_tab %>% select(-DATE,-VALUE)
se_spread <<- se  %>%
select(SCODE,TYPE,UNIT,VALUE,DATE) %>%
mutate(DATE=paste0("(",as_datetime(DATE),")"))%>%
unite(VALUE,VALUE,UNIT,sep=" ") %>%
mutate(VALUE=paste0("<b>",VALUE,"</b>"))%>%
unite(VALUE,VALUE,DATE,sep=" ") %>%
spread(TYPE,VALUE)
sspat<<-getMeteoStat(format = "spatial")
se_spread<<-left_join(sspat,se_spread)
tot_tab<- tot_tab_def
legend_tab<- legend_tab_def
se_spread <- se_spread_def
sspat<- sspat_def
se_spread<- se_spread_def
tot_tab_def <- tot_tab
legend_tab_def <-legend_tab
se_spread_def <-se_spread
sspat_def <-sspat
se_spread_def <- se_spread
save(tot_tab_def,file = "tot_tab_def.rda")
save(legend_tab_def,file = "legend_tab_def.rda")
save(se_spread_def,file = "se_spread_def.rda")
save(sspat_def,file = "sspat_def.rda")
save(se_spread_def,file = "se_spread_def.rda")
se<-bind_rows(u)
se <-se[!duplicated(se[ , 1:2 ]), ]
st<-getMeteoStat()
legend_tab<-full_join(st,se)%>%#dplyr::select(-NAME_L,-NAME_E,-DESC_L,-DATE,VALUE,-LAT,-LONG,-VALUE)%>%
mutate_if(is.character, funs(as.factor(.)))%>%
mutate(
id=row_number(),
DESC_E=as.factor(ifelse(DESC_D=="relative Luftfeuchte","Relative humidity",
ifelse(DESC_D=="Niederschlag","Precipitation",
ifelse(DESC_D=="Windgeschwindigkeit","Wind speed",
ifelse(DESC_D=="Windrichtung","Wind direction",
ifelse(DESC_D=="Windgeschwindigkeit Böe","Wind direction",
ifelse(DESC_D=="Luftdruck","Atmospheric pression",
ifelse(DESC_D=="Globalstrahlung","Solar Radiation",
ifelse(DESC_D=="Sonnenscheindauer","Sunshine hours",
ifelse(DESC_D=="Schneehöhe","Snow height",
ifelse(DESC_D=="Wassertemperatur","Water temperature",
ifelse(DESC_D=="Lufttemperatur","Air temperature",
ifelse(DESC_D=="Durchfluss","Water flow",
ifelse(DESC_D=="Wasserstand","Water level",
ifelse(DESC_D=="Grundwasserstand","Groundwater level","unknown"))))))))))))))))
tot_tab<<-legend_tab%>%select(-NAME_L,-DESC_L,-DATE,-LAT,-LONG,-VALUE) %>%
mutate(NAME = paste(NAME_D,NAME_I,sep=" / ")) %>%
mutate(DESC_D = paste(DESC_D,UNIT,sep=" - ")) %>%
mutate(DESC_I = paste(DESC_I,UNIT,sep=" - ")) %>%
unite(DESC_E,DESC_E,UNIT,sep=" - ")
legend_tab<<-legend_tab %>% select(-DATE,-VALUE)
se_spread <<- se  %>%
select(SCODE,TYPE,UNIT,VALUE,DATE) %>%
mutate(DATE=paste0("(",as_datetime(DATE),")"))%>%
unite(VALUE,VALUE,UNIT,sep=" ") %>%
mutate(VALUE=paste0("<b>",VALUE,"</b>"))%>%
unite(VALUE,VALUE,DATE,sep=" ") %>%
spread(TYPE,VALUE)
sspat<<-getMeteoStat(format = "spatial")
se_spread<<-left_join(sspat,se_spread)
tot_tab_def <- tot_tab
legend_tab_def <-legend_tab
se_spread_def <-se_spread
sspat_def <-sspat
se_spread_def <- se_spread
save(tot_tab_def,file = "tot_tab_def.rda")
save(legend_tab_def,file = "legend_tab_def.rda")
save(sspat_def,file = "sspat_def.rda")
save(se_spread_def,file = "se_spread_def.rda")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = T)
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = T)
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = T)
u <- tryCatch({
GET(url) %>% content
}, error = function(e){NULL})#
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = T)
devtools::install_github("GiulioGenova/MeteoBrowser",repo = "package")
devtools::install_github("GiulioGenova/MeteoBrowser",ref = "package")
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = F)
MeteoBrowser::run_app("MeteoBrowser",launchBrowser = F)
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd",output_format = "pdf_format")
rmarkdown::render("article.Rmd"")
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd")
rmarkdown::render("article.Rmd")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
remove.packages("MeteoBrowser")
library(MeteoBrowser)
library(MeteoBrowser)
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser")
library(MeteoBrowser)
run_app("MeteoBrowser",launchBrowser = T)
run_app("MeteoBrowser",launchBrowser = T)
run_app("MeteoBrowser",launchBrowser = T)
# Titile: per Elisa
# Description: download and resample meteo data province bz
#
# Author: Giulio Genova
# Contact: giulio.genova@eurac.edu
#
# Requires: MonalisR, MeteoBrowser
#
#
station= "00390SF"
sensors=c("LF","LT")
datestart="2019-01-01"
dateend="2019-01-10"
round="hour"
downloadMeteo_mult_sens <- function(sensor_code,station_code ,
datestart,dateend){
# download the timeseries (one station, one sensor) with MonalisR package
df = MonalisR::downloadMeteo(station_code = station_code ,sensor_code = sensor_code,
datestart = datestart,dateend = dateend)
# MonalisR uses "Station" MeteoBrowser uses "SCODE". rename this column.
names(df)[which(names(df)=="Station")]="SCODE"
return(df)
}
# apply download function to all sensors
df = lapply(sensors, downloadMeteo_mult_sens,station_code= station ,
datestart=datestart,dateend=dateend)
# bind all downloaded tables
df = dplyr::bind_rows(df)
# use the resample function fron MeteoBrowser package
df_res = MeteoBrowser::resample_provBz_data(df,round = round)
# if you want spread data use:
df_res = tidyr::spread(df_res,Sensor,Value)
View(df_res)
library(MeteoBrowser)
devtools::install_git("C:/Users/CdcUtente/OneDrive - Scientific Network South Tyrol/Git/MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser")
get_provBz_sensors()
get_provBz_sensors()
getMeteoSensor()
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
devtools::install_github("GiulioGenova/MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
library(MeteoBrowser)
MeteoBrowser::run_app("MeteoBrowser")
devtools::install_github("GiulioGenova/MeteoBrowser")
MeteoBrowser::run_app("MeteoBrowser")
